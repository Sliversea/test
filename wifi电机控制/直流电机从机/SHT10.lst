C51 COMPILER V9.00   SHT10                                                                 10/22/2020 14:49:10 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SHT10
OBJECT MODULE PLACED IN .\out\SHT10.obj
COMPILER INVOKED BY: C:\program\keil\C51\BIN\C51.EXE src\SHT10.c BROWSE DEBUG OBJECTEXTEND PRINT(.\SHT10.lst) OBJECT(.\o
                    -ut\SHT10.obj)

line level    source

   1          #include "config.h"
   2          #include "SHT10.h"
   3          
   4          
   5          uchar error;         //全局错误变量
   6          uchar ack;           //全局应答变量
   7          uchar temp_H;        //全局应答变量
   8          uchar temp_L;        //全局应答变量
   9          float temp_disp=0;   //温度显值
  10          float humi_disp=0;   //湿度显值
  11          
  12          
  13          /********************************************************
  14          函数功能:从总线上读取字节，返回应答信号
  15          
  16          参考资料:发出一组测量命令之后控制器要等待测量结束，SHT10
  17                   通过下拉DATA至低电平并进入空闲模式，表示测量的结
  18                           束,MCU再次触发SCK钱必须等待这个数据备妥信号来读数
  19                           据。接着传输2字节的测量数据和1字节的CRC奇偶校验。
  20                           可以使用CRC数据的确认位来终止通讯，如果不使用校验
  21                           则在测量到LSB之后可以通过保持确认位ack高电平来终
  22                           止通讯。
  23          ***********************************************************/
  24          void read(void) 
  25          { 
  26   1          uchar i,val=0;
  27   1          temp_L=0;
  28   1          temp_H=0;
  29   1        
  30   1          DATA1=1;                      //释放数据总线
  31   1              ////////////////读取MSB，高字节的值///////////
  32   1          for (i=0x80;i>0;i/=2)        //位移8位
  33   1          { 
  34   2              SCK1=1;                   //上升沿读入
  35   2              if (DATA1) val=(val | i); //确定值  
  36   2              SCK1=0;              
  37   2          }
  38   1      
  39   1          DATA1=0;                      //读应答信号，有应答为1，为应答为0 通过CPU下拉为应答
  40   1          SCK1=1;                       //第9个脉冲
  41   1          _nop_(); _nop_(); _nop_();   //SCK线高电平持续时间最低0.1us 
  42   1          SCK1=0;                 
  43   1          DATA1=1;                      //释放数据总线
  44   1          temp_H=val;                                  //读取MSB的值
  45   1          val=0;
  46   1      
  47   1          ////////////////读取LSB，低字节的值////////////
  48   1          DATA1=1;                      //释放数据总线
  49   1          for (i=0x80;i>0;i/=2)        //位移8位
  50   1          { 
  51   2              SCK1=1;                   //上升沿读入
  52   2              if (DATA1) val=(val | i); //确定值  
  53   2              SCK1=0;              
  54   2          }
C51 COMPILER V9.00   SHT10                                                                 10/22/2020 14:49:10 PAGE 2   

  55   1          DATA1=1;                      //不需要应答 通过CPU下拉为应答
  56   1          SCK1=1;                       //第9个脉冲
  57   1          _nop_(); _nop_(); _nop_();   //高电平有效宽度0.5us,最低0.1us 
  58   1          SCK1=0;                 
  59   1          DATA1=1;                      //释放数据总线
  60   1          temp_L=val;                                  //读取LSB的值
  61   1      }
  62          
  63          
  64          
  65          /**********************************************************
  66          函数功能:向总线写字节，返回应答信号
  67          入口参数:value - 命令
  68          返回值: ack - 应答信号，1表示无应答
  69          
  70          参考资料:启动传输之后开始发送各种命令，包括三个默认为000的
  71                   地址位和5个命令位。在第8个SCK的下降沿之后将DATA下
  72                           拉为低电平，则表示SHTXX已经接收到正确命令，在第9
  73                           个SCK下降沿之后释放DATA
  74          ***********************************************************/
  75          char write_SHT(uchar value) 
  76          { 
  77   1          uchar i ;
  78   1          ack=0;  
  79   1          for (i=0x80;i>0;i/=2)             //释放数据总线
  80   1          { 
  81   2              if (i & value) DATA1=1;        //写入值
  82   2              else DATA1=0;                        
  83   2              SCK1=1;                        //上升沿写入
  84   2              _nop_(); _nop_(); _nop_();       
  85   2              SCK1=0;
  86   2          }
  87   1          DATA1=1;                           //释放数据总线
  88   1          SCK1=1;                            //第9个脉冲
  89   1          if(DATA1) ack=1;                   //读应答信号                   
  90   1          SCK1=0; 
  91   1              DATA1=1;                           //释放数据总线       
  92   1          return ack;                       //ack=1表示没有应答
  93   1      }
  94          
  95          
  96          
  97          
  98          /**************************************************
  99          函数功能：传输启动
 100          
 101          参考资料:当SCK高电平的时候DATA可以翻转，紧接着CK变
 102                   为低电平，随后是SCK为高电平时DATA翻转为高
 103                           电平
 104          **************************************************/
 105          void trans_start(void) 
 106          {  
 107   1          DATA1=1; 
 108   1              SCK1=0;                         //数据为1，SCK=0
 109   1          _nop_();
 110   1          SCK1=1;                         //第一个脉冲
 111   1          _nop_();
 112   1          DATA1=0;                        //数据跌落
 113   1          _nop_ ();
 114   1          SCK1=0;                         //完成一个脉冲
 115   1          _nop_(); 
 116   1              _nop_(); 
C51 COMPILER V9.00   SHT10                                                                 10/22/2020 14:49:10 PAGE 3   

 117   1              _nop_();
 118   1          SCK1=1;                         //再一个脉冲
 119   1          _nop_();
 120   1          DATA1=1;                        //数据变为1         
 121   1          _nop_();
 122   1          SCK1=0;                         //完成该脉冲        
 123   1      }
 124          
 125          
 126          /*************************************************
 127          函数功能：通讯复位
 128          
 129          参考资料:当DATA保持高电平的时候，SCK触发9次或更多
 130                   然后在下一个指令前发送一个传输启动时序能
 131                           够复位串口
 132          *************************************************/
 133          void connect_reset(void)  
 134          {  
 135   1          uchar i; 
 136   1          DATA1=1; 
 137   1              SCK1=0;                //数据为1 时钟为0
 138   1          for(i=0;i<9;i++)      //9 个脉冲为 复位
 139   1          { 
 140   2              SCK1=1;
 141   2              SCK1=0;
 142   2          }
 143   1          trans_start();        //传输启动          
 144   1      }
 145          
 146          
 147          /*****************************************
 148          函数功能：测量温度或者是湿度，返回校验值
 149          ******************************************/
 150          void measure(uchar cmd)
 151          { 
 152   1          uint i;
 153   1          trans_start();          //启动
 154   1          write_SHT(cmd);         //写入测温命令
 155   1      
 156   1          if(ack)                     //应答失败
 157   1          {
 158   2              connect_reset();    //通讯复位数据串口
 159   2              write_SHT(cmd);     //重新写入测温命令
 160   2          }
 161   1          
 162   1              for(i=0;i<55535;i++)
 163   1              { 
 164   2                      if(!DATA1) break;       //若已经转换完成则DATA线拉为低电平
 165   2                      else  
 166   2                      {
 167   3                          ;           
 168   3                      } 
 169   2              }
 170   1          read();                //读温度
 171   1      }    
 172          
 173          
 174          /*********************************
 175          函数功能：计算温度
 176          **********************************/
 177          void get_temp(void)
 178          {
C51 COMPILER V9.00   SHT10                                                                 10/22/2020 14:49:10 PAGE 4   

 179   1          float a=0,temp_zi;
 180   1      
 181   1              
 182   1      
 183   1          a=(float)temp_H*256+(float)temp_L;  
 184   1          temp_zi=D2_14bit*a+D1_5v;                       //数字输出转换为温度值 T=d1+d2*SOt
 185   1      
 186   1          if(temp_zi<MIN_TEMP)  temp_zi=MIN_TEMP;             //限位，SHT10量程-40°C  ~ 123.8℃，零下温度不测
 187   1              if(temp_zi>MAX_TEMP)  temp_zi=MAX_TEMP;
 188   1      
 189   1          temp_disp=temp_zi;
 190   1              temp_disp=(int)temp_disp;
 191   1      }
 192          
 193          
 194          
 195          /*********************************
 196          函数功能：计算湿度
 197          **********************************/
 198          void get_humi(void)
 199          {
 200   1          float a=0,b=0,humi_zi;
 201   1          a=(float)temp_H*256+(float)temp_L; 
 202   1              humi_zi=C1+C2_12bit*a+a*a*C3_12bit;        //修正输出湿度值
 203   1          humi_disp=humi_zi;
 204   1              humi_disp=(int)humi_disp;
 205   1      }
 206          
 207          
 208          
 209          /*********************************
 210          函数功能：温湿度处理函数
 211          **********************************/
 212          void deal_whole(void)
 213          {
 214   1          error=0;
 215   1          ack=0;
 216   1      
 217   1              P1M0 &= 0;
 218   1              P2M0 &= 0;
 219   1      
 220   1          connect_reset() ;            //复位
 221   1          measure(MEASURE_TEMP);       //测量温度
 222   1      
 223   1          get_temp();                                  //获取温度数值
 224   1          measure(MEASURE_HUMI);       //测量湿度   
 225   1      
 226   1          get_humi();                  //获得湿度数据
 227   1      
 228   1              //Uart1_TxByte(temp_disp);
 229   1              //Uart1_TxByte(humi_disp); 
 230   1      
 231   1              P1M0 |= 0x11;
 232   1              P2M0 |= 0x70;
 233   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    635    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.00   SHT10                                                                 10/22/2020 14:49:10 PAGE 5   

   DATA SIZE        =     12      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
